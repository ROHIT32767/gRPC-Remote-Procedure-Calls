# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import payment_pb2 as payment__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in payment_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class PaymentServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Authenticate = channel.unary_unary(
                '/PaymentService/Authenticate',
                request_serializer=payment__pb2.AuthRequest.SerializeToString,
                response_deserializer=payment__pb2.AuthResponse.FromString,
                _registered_method=True)
        self.ExecutePayment = channel.unary_unary(
                '/PaymentService/ExecutePayment',
                request_serializer=payment__pb2.PaymentExecutionRequest.SerializeToString,
                response_deserializer=payment__pb2.PaymentExecutionResponse.FromString,
                _registered_method=True)
        self.FetchBalance = channel.unary_unary(
                '/PaymentService/FetchBalance',
                request_serializer=payment__pb2.BalanceFetchRequest.SerializeToString,
                response_deserializer=payment__pb2.BalanceFetchResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/PaymentService/HealthCheck',
                request_serializer=payment__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=payment__pb2.HealthCheckResponse.FromString,
                _registered_method=True)


class PaymentServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Authenticate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecutePayment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchBalance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PaymentServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Authenticate': grpc.unary_unary_rpc_method_handler(
                    servicer.Authenticate,
                    request_deserializer=payment__pb2.AuthRequest.FromString,
                    response_serializer=payment__pb2.AuthResponse.SerializeToString,
            ),
            'ExecutePayment': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecutePayment,
                    request_deserializer=payment__pb2.PaymentExecutionRequest.FromString,
                    response_serializer=payment__pb2.PaymentExecutionResponse.SerializeToString,
            ),
            'FetchBalance': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchBalance,
                    request_deserializer=payment__pb2.BalanceFetchRequest.FromString,
                    response_serializer=payment__pb2.BalanceFetchResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=payment__pb2.HealthCheckRequest.FromString,
                    response_serializer=payment__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'PaymentService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('PaymentService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PaymentService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Authenticate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PaymentService/Authenticate',
            payment__pb2.AuthRequest.SerializeToString,
            payment__pb2.AuthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecutePayment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PaymentService/ExecutePayment',
            payment__pb2.PaymentExecutionRequest.SerializeToString,
            payment__pb2.PaymentExecutionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FetchBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PaymentService/FetchBalance',
            payment__pb2.BalanceFetchRequest.SerializeToString,
            payment__pb2.BalanceFetchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PaymentService/HealthCheck',
            payment__pb2.HealthCheckRequest.SerializeToString,
            payment__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class BankServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PrepareTransaction = channel.unary_unary(
                '/BankService/PrepareTransaction',
                request_serializer=payment__pb2.TransactionPrepareRequest.SerializeToString,
                response_deserializer=payment__pb2.TransactionVote.FromString,
                _registered_method=True)
        self.CommitTransaction = channel.unary_unary(
                '/BankService/CommitTransaction',
                request_serializer=payment__pb2.TransactionCommitRequest.SerializeToString,
                response_deserializer=payment__pb2.TransactionAck.FromString,
                _registered_method=True)
        self.AbortTransaction = channel.unary_unary(
                '/BankService/AbortTransaction',
                request_serializer=payment__pb2.TransactionAbortRequest.SerializeToString,
                response_deserializer=payment__pb2.TransactionAck.FromString,
                _registered_method=True)
        self.FetchBankBalance = channel.unary_unary(
                '/BankService/FetchBankBalance',
                request_serializer=payment__pb2.BankBalanceFetchRequest.SerializeToString,
                response_deserializer=payment__pb2.BankBalanceFetchResponse.FromString,
                _registered_method=True)


class BankServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PrepareTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CommitTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AbortTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchBankBalance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BankServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PrepareTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.PrepareTransaction,
                    request_deserializer=payment__pb2.TransactionPrepareRequest.FromString,
                    response_serializer=payment__pb2.TransactionVote.SerializeToString,
            ),
            'CommitTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.CommitTransaction,
                    request_deserializer=payment__pb2.TransactionCommitRequest.FromString,
                    response_serializer=payment__pb2.TransactionAck.SerializeToString,
            ),
            'AbortTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.AbortTransaction,
                    request_deserializer=payment__pb2.TransactionAbortRequest.FromString,
                    response_serializer=payment__pb2.TransactionAck.SerializeToString,
            ),
            'FetchBankBalance': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchBankBalance,
                    request_deserializer=payment__pb2.BankBalanceFetchRequest.FromString,
                    response_serializer=payment__pb2.BankBalanceFetchResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'BankService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('BankService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class BankService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PrepareTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/BankService/PrepareTransaction',
            payment__pb2.TransactionPrepareRequest.SerializeToString,
            payment__pb2.TransactionVote.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CommitTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/BankService/CommitTransaction',
            payment__pb2.TransactionCommitRequest.SerializeToString,
            payment__pb2.TransactionAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AbortTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/BankService/AbortTransaction',
            payment__pb2.TransactionAbortRequest.SerializeToString,
            payment__pb2.TransactionAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FetchBankBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/BankService/FetchBankBalance',
            payment__pb2.BankBalanceFetchRequest.SerializeToString,
            payment__pb2.BankBalanceFetchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
